1----DONE create 'backend folder'
1-a create react application with 'frontend folder'

--Create the vite project in react

npm create vite@5.2.0 frontend

Done. Now run:

  cd frontend
  npm install
  npm run dev
2---create backend environment
in   "twitter-clone" folder
npm init -y
install these packages:
npm install express mongoose jsonwebtoken bcryptjs dotenv cors cookie-parser cloudinary
npm i -D nodemon

jsonwebtoken -- for authentication
bcryptjs -- hash passwords
dotenv -- read content of .env files
cookie-parser -- get the cookies from request

3-
in "twitter clone folder" in package.json
write "type":"modules"  
A new way of importing modules

4--Add these snippets aolso
"scripts": {
    "dev": "nodemon backend/server.js",
    "start": "node backend/server.js"
  },
5-- change the "main":"backend/server.js"

6--Create folder "routes" for express app routes and "controllers" folder
7--"models" folder for DB tables
8-- in routes folder create "auth.routes.js". it will manage our routes
http://localhost:8000/api/auth/signup -- test this endpoint
9 -- in 'controllers' we have the functions wich we recall in 'routes' folder
10--in 'twitter-clone' folder create the  .env file where we save MONGO_URL

11 -- import dotenv from "dotenv" in server.js 
dotenv.config();
it helps to use .env variables inside file
12 - Creating 'user' model in 'models' folder
13 - then go to controllers/auth.controller.js and implement POST GET request
to create user and login and logout
14 - in 'server.js' add app.use(express.json())
15 - status codes: 201 - something was created, 404 file not found, 500 server error
16 - in GitBash terminal 
openssl rand -base64 32
to generate JWT_SECRET string
17 - add functionality to Signup, Login, logout
18 - added getMe function for (authorized users)
19 - Creating 'middleware' folder where we will check out, decode jwt for users actions
20 - 
--Create user.controller.js and user.routes.js
, look at profile update, follow, delete

21 --create the notification modle in models
22 -- ADD API data to .env from CLOUDINARY_URL=cloudinary://<your_api_key>:<your_api_secret>@disicfpk1
23 -- in server.js configure your coudinary account
24 -- 




-------------------------------------------------------------------------------------------
!!IMPORTANT
***DEPLOYING****
HOW to deploy entire upplication FRONTEND and BACKEND on one localhost or one domain name
1# in server.js 
import path from "path"
--get the main root folder path "C:\\mern-course=site"

const __dirname = path.resolve()

--"npm run biuld" this command make "dist" folder for production

--make react fronted file like static for backend
if (process.env.NODE_ENV === "production"){
  app.use(express.static(path.join(__dirname, "/fronted/dist"))
  app.get("*", (req, res)=>{
    res.sendFile(path.resolve(__dirname, "fronted", "dist", "index.html"))
  })
}

**it installs dependencies and  build app 
#2 in mern-course-site--> package.json file
add this on "scripts"
-- "build":"npm install && npm install --prefix frontend && npm run build --prefix fronted"
-- "start":"NODE_ENV=production node backend/server.js"




